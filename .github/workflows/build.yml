name: Builds for various architectures

on:
  push:
    branches:
    - feature/*
    - cicd
  pull_request:
    branches:
      - ci-tests

jobs:
  # build_iOS:
  #   name: Build iOS
  #   runs-on: macos-latest
  #   # runs-on: self-hosted
  #   runs-on: self-hosted
  #   timeout-minutes: 60
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   strategy:
  #     matrix:
  #       destination: ["platform=iOS Simulator,name=iPhone 12"]
  #       scheme: 
  #         - TealiumCore
  #         - TealiumCollect
  #         - TealiumLifecycle
  #         - TealiumVisitorService
  #         - TealiumLocation
  #         - TealiumRemoteCommands
  #         - TealiumTagManagement
  #         - TealiumAttribution
  #         - TealiumAutotracking
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build iOS - ${{ matrix.scheme }}
  #       run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project tealium-swift.xcodeproj -scheme "${{ matrix.scheme }}" -destination "${{ matrix.destination }}" clean build | xcpretty
  #       working-directory: ${{ env.working-directory }}
  # build_macOS:
  #   name: Build macOS
  #   runs-on: macos-latest
  #   # runs-on: self-hosted
  #   timeout-minutes: 60
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   strategy:
  #     matrix:
  #       destination: ["platform=macOS,arch=x86_64"]
  #       scheme: 
  #         - TealiumCore
  #         - TealiumCollect
  #         - TealiumLifecycle
  #         - TealiumVisitorService
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build macOS - ${{ matrix.scheme }}
  #       run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project tealium-swift.xcodeproj -scheme "${{ matrix.scheme }}" -destination "${{ matrix.destination }}" clean build | xcpretty
  #       working-directory: ${{ env.working-directory }}
  # build_tvOS:
  #   name: Build tvOS
  #   runs-on: macos-latest
  #   # runs-on: self-hosted
  #   timeout-minutes: 60
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   strategy:
  #     matrix:
  #       destination: ["platform=tvOS Simulator,name=Apple TV"]
  #       scheme: 
  #         - TealiumCore
  #         - TealiumCollect
  #         - TealiumLifecycle
  #         - TealiumVisitorService
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build tvOS - ${{ matrix.scheme }}
  #       run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project tealium-swift.xcodeproj -scheme "${{ matrix.scheme }}" -destination "${{ matrix.destination }}" clean build | xcpretty
  #       
  veracode:
    name: Veracode Upload and Scan
    runs-on: ubuntu-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
      working-directory: ./builder
    steps:
      - uses: actions/checkout@v2
      - name: Build iOS Package
        run: set -o pipefail && env NSUnbufferedIO=YES sh ./veracode.sh
        shell: bash
        working-directory: ${{ env.working-directory }}
      - name: Set up Java
        uses: actions/setup-java@v1 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'
      - name: Upload BCA    
        uses: actions/upload-artifact@v2 # Copy files from repository to docker container so the next uploadandscan action can access them.
        with:
          name: veracode
          path: ./builder/veracode/tealium-swift.bca       
      - name: Send for Security Scan
        uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
        with:
          appname: Mobile Libraries
          filepath: ./builder/veracode/tealium-swift.bca
          vid: ${{ secrets.VERACODE_API_ID }}
          vkey: ${{ secrets.VERACODE_API_KEY }}
          createsandbox: false
          sandboxname: tealium-swift 2.X
          #scanallnonfataltoplevelmodules: true
          #toplevel: true
          #selectedpreviously: true