name: Builds for various architectures

on:
  push:
    branches:
    - feature/*
    - cicd
  pull_request:
    branches:
      - ci-tests

jobs:
  # build_iOS:
  #   name: Build iOS
  #   runs-on: macos-latest
  #   # runs-on: self-hosted
  #   runs-on: self-hosted
  #   timeout-minutes: 60
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   strategy:
  #     matrix:
  #       destination: ["platform=iOS Simulator,name=iPhone 12"]
  #       scheme: 
  #         - TealiumCore
  #         - TealiumCollect
  #         - TealiumLifecycle
  #         - TealiumVisitorService
  #         - TealiumLocation
  #         - TealiumRemoteCommands
  #         - TealiumTagManagement
  #         - TealiumAttribution
  #         - TealiumAutotracking
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build iOS - ${{ matrix.scheme }}
  #       run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project tealium-swift.xcodeproj -scheme "${{ matrix.scheme }}" -destination "${{ matrix.destination }}" clean build | xcpretty
  #       working-directory: ${{ env.working-directory }}
  # build_macOS:
  #   name: Build macOS
  #   runs-on: macos-latest
  #   # runs-on: self-hosted
  #   timeout-minutes: 60
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   strategy:
  #     matrix:
  #       destination: ["platform=macOS,arch=x86_64"]
  #       scheme: 
  #         - TealiumCore
  #         - TealiumCollect
  #         - TealiumLifecycle
  #         - TealiumVisitorService
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build macOS - ${{ matrix.scheme }}
  #       run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project tealium-swift.xcodeproj -scheme "${{ matrix.scheme }}" -destination "${{ matrix.destination }}" clean build | xcpretty
  #       working-directory: ${{ env.working-directory }}
  # build_tvOS:
  #   name: Build tvOS
  #   runs-on: macos-latest
  #   # runs-on: self-hosted
  #   timeout-minutes: 60
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   strategy:
  #     matrix:
  #       destination: ["platform=tvOS Simulator,name=Apple TV"]
  #       scheme: 
  #         - TealiumCore
  #         - TealiumCollect
  #         - TealiumLifecycle
  #         - TealiumVisitorService
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build tvOS - ${{ matrix.scheme }}
  #       run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project tealium-swift.xcodeproj -scheme "${{ matrix.scheme }}" -destination "${{ matrix.destination }}" clean build | xcpretty
  #       
  veracode_pkg:
    name: Veracode Package
    runs-on: macos-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
      working-directory: ./builder
    steps:
      - uses: actions/checkout@v2
      - name: Run Fastlane Archive
      run: |
        fastlane run xcarchive archive_path:"tealium-swift.xcodeproj" project:"tealium-swift.xcodeproj" scheme:"iOSTealiumTest"
      # - name: Sign In to Xcode
      #   uses: sinoru/actions-setup-xcode@v1.1
      #   with:
      #     xcode-version: '12.3'
      #     apple-id: ${{ secrets.APPLE_ID_PASSWORD }}
      #     apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
      # - uses: actions/checkout@v2
      # - name: Install application certificate
      #   uses: apple-actions/import-codesign-certs@v1
      #   with: 
      #     keychain: ${{ github.run_id }}
      #     keychain-password: ${{ github.run_id }}
      #     p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
      #     p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      # - name: Install installer certificate
      #   uses: apple-actions/import-codesign-certs@v1
      #   with: 
      #     keychain: ${{ github.run_id }}
      #     keychain-password: ${{ github.run_id }}
      #     create-keychain: false
      #     p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
      #     p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}   
      - uses: actions/checkout@v2
      - name: Build iOS Package
        run: set -o pipefail && env NSUnbufferedIO=YES sh ./veracode.sh && cd veracode && brew install coreutils && export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" && ls -l --block-size=MB
        #run: set -o pipefail && env NSUnbufferedIO=YES sh ./veracode.sh
        #run: vcxcodepkg -b=~/tealium-swift.xcodeproj --noui --logfile=~/Desktop/log.log
        #run: vcxcodepkg -a=~/MyArchive.xcarchive --verbose
        #shell: bash
        working-directory: ${{ env.working-directory }}
      - uses: actions/checkout@v2
      # - name: Set up Java
      #   uses: actions/setup-java@v1
      #   with: 
      #     java-version: '8'
      - name: Upload BCA    
        uses: actions/upload-artifact@v2
        with:
          name: 'veracode'
          path: 'builder/veracode/tealium-swift.bca' 
          retention-days: 5      
          #path: ~/Documents/MobileApplicationPackager/ 
  # veracode_scan:
  #   name: Veracode Upload and Scan
  #   needs: veracode_pkg
  #   runs-on: ubuntu-latest
  #   env: 
  #     DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  #     working-directory: ./builder
  #   steps:
  #   - uses: actions/checkout@v2
  #   # - name: Download artifact
  #   #   uses: dawidd6/action-download-artifact@v2
  #   #   with:
  #   #     workflow: build.yml
  #   #     name: 'veracode'
  #   #     path: '~/Desktop/veracode/tealium-swift.bca'  
  #   - name: Send for Security Scan
  #     uses: veracode/veracode-uploadandscan-action@master
  #     with:
  #       appname: Mobile Libraries
  #       filepath: $HOME/Desktop/veracode/tealium-swift.bca
  #       vid: ${{ secrets.VERACODE_API_ID }}
  #       vkey: ${{ secrets.VERACODE_API_KEY }}
  #       createsandbox: false
  #       sandboxname: tealium-swift 2.X
  #       #scanallnonfataltoplevelmodules: true
  #       #toplevel: true
  #       #selectedpreviously: true